//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class TimeEntity {

    public HourComponent hour { get { return (HourComponent)GetComponent(TimeComponentsLookup.Hour); } }
    public bool hasHour { get { return HasComponent(TimeComponentsLookup.Hour); } }

    public void AddHour(float newValue) {
        var index = TimeComponentsLookup.Hour;
        var component = CreateComponent<HourComponent>(index);
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceHour(float newValue) {
        var index = TimeComponentsLookup.Hour;
        var component = CreateComponent<HourComponent>(index);
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveHour() {
        RemoveComponent(TimeComponentsLookup.Hour);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class TimeMatcher {

    static Entitas.IMatcher<TimeEntity> _matcherHour;

    public static Entitas.IMatcher<TimeEntity> Hour {
        get {
            if (_matcherHour == null) {
                var matcher = (Entitas.Matcher<TimeEntity>)Entitas.Matcher<TimeEntity>.AllOf(TimeComponentsLookup.Hour);
                matcher.componentNames = TimeComponentsLookup.componentNames;
                _matcherHour = matcher;
            }

            return _matcherHour;
        }
    }
}
