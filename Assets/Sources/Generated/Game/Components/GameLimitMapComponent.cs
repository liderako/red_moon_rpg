//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public LimitMapComponent limitMap { get { return (LimitMapComponent)GetComponent(GameComponentsLookup.LimitMap); } }
    public bool hasLimitMap { get { return HasComponent(GameComponentsLookup.LimitMap); } }

    public void AddLimitMap(UnityEngine.Vector2 newAxisX, UnityEngine.Vector2 newAxisY, UnityEngine.Vector2 newAxisZ) {
        var index = GameComponentsLookup.LimitMap;
        var component = CreateComponent<LimitMapComponent>(index);
        component.axisX = newAxisX;
        component.axisY = newAxisY;
        component.axisZ = newAxisZ;
        AddComponent(index, component);
    }

    public void ReplaceLimitMap(UnityEngine.Vector2 newAxisX, UnityEngine.Vector2 newAxisY, UnityEngine.Vector2 newAxisZ) {
        var index = GameComponentsLookup.LimitMap;
        var component = CreateComponent<LimitMapComponent>(index);
        component.axisX = newAxisX;
        component.axisY = newAxisY;
        component.axisZ = newAxisZ;
        ReplaceComponent(index, component);
    }

    public void RemoveLimitMap() {
        RemoveComponent(GameComponentsLookup.LimitMap);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherLimitMap;

    public static Entitas.IMatcher<GameEntity> LimitMap {
        get {
            if (_matcherLimitMap == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.LimitMap);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherLimitMap = matcher;
            }

            return _matcherLimitMap;
        }
    }
}
