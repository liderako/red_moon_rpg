//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public ThirstComponent thirst { get { return (ThirstComponent)GetComponent(GameComponentsLookup.Thirst); } }
    public bool hasThirst { get { return HasComponent(GameComponentsLookup.Thirst); } }

    public void AddThirst(int newValue, int newMaxValue) {
        var index = GameComponentsLookup.Thirst;
        var component = CreateComponent<ThirstComponent>(index);
        component.value = newValue;
        component.maxValue = newMaxValue;
        AddComponent(index, component);
    }

    public void ReplaceThirst(int newValue, int newMaxValue) {
        var index = GameComponentsLookup.Thirst;
        var component = CreateComponent<ThirstComponent>(index);
        component.value = newValue;
        component.maxValue = newMaxValue;
        ReplaceComponent(index, component);
    }

    public void RemoveThirst() {
        RemoveComponent(GameComponentsLookup.Thirst);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherThirst;

    public static Entitas.IMatcher<GameEntity> Thirst {
        get {
            if (_matcherThirst == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Thirst);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherThirst = matcher;
            }

            return _matcherThirst;
        }
    }
}
